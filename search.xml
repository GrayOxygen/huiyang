<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ditto+GitHub Pages搭建和发布个人wiki</title>
    <url>/huiyang/2016/09/21/manual/</url>
    <content><![CDATA[<p>本文介绍如何用ditto构建wiki静态站点，发布到github pages可随时随地进行访问，ditto构建的wiki支持站内查询和在线编辑，适合搭建个人wiki。</p>
<h2 id="几种wiki搭建技术的比较"><a href="#几种wiki搭建技术的比较" class="headerlink" title="几种wiki搭建技术的比较"></a>几种wiki搭建技术的比较</h2><p>在使用ditto之前我还尝试了xwiki，gollum，MDWiki，xwiki偏向企业级，当时考虑到github pages提供免费的静态站点发布以及个人wiki的简洁性，就最终使用了hexo。MDWiki跟ditto类似，都是通过一个html来处理写作好的markdown文件，但是ditto的布局更简洁，搭建简单，用github pages就能发布到公网了。</p>
<h2 id="下载ditto"><a href="#下载ditto" class="headerlink" title="下载ditto"></a>下载ditto</h2><blockquote>
<p>执行命令 <code>curl -L https://git.io/v6T7r &gt; install.sh &amp;&amp; sh install.sh</code> </p>
</blockquote>
<blockquote>
<p>ditto相关的文件会下载到当前目录，具体包含了：</p>
</blockquote>
<ul>
<li>sidebar.md</li>
<li>install.sh</li>
<li>index.html</li>
<li>docs<ul>
<li>api.md</li>
<li>faq.md</li>
</ul>
</li>
</ul>
<blockquote>
<p>sidebar.md是侧边栏，install.sh启动程序，启动会自动生成上述文件，服务器默认访问的主页面即index.html，docs有api.md和faq.md，只是例子，具体是在sidebar.md引入链接，<a href=""></a>引入链接时不用写后缀名，会自动加上的。</p>
</blockquote>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><blockquote>
<p>我们在docs下面创建要写作的markdown文件，我用sublime text 3来进行markdown的写作，需装markdown相关插件</p>
</blockquote>
<h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><blockquote>
<p>我在win7系统安装了python，在工程根目录下打开git bash或者其他命令行窗口执行server命令运行wiki，cmd用python.exe -m  http.server 8000可开启指定端口(此处设置为8000)的服务器，方便快速查看本地效果。可用其他服务器。</p>
</blockquote>
<h2 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h2><blockquote>
<p>上述步骤已完成wiki的搭建和运行，现在需要部署发布到github上。<br>首先你得有github账号，在上面创建一个srepository，然后clone到本地，即你的本地工程，本地工程中加入，如下文件(从ditto源码中拿，<a href="https://github.com/chutsu/ditto/">源码传送</a>)：</p>
</blockquote>
<ul>
<li><p>sidebar.md</p>
</li>
<li><p>index.html</p>
</li>
<li><p>js</p>
<ul>
<li>marked.js</li>
<li>highlight.js</li>
<li>ditto.js</li>
</ul>
</li>
<li><p>css</p>
<ul>
<li>github.css</li>
<li>ditto.css</li>
</ul>
</li>
<li><p>docs<br>观察index.html，发现引用的js和css不是cdn就是ditto的github上的地址，我拷贝js和css到自己的工程来，保证js和css不会因为ditto更新而变化，若要更新所用ditto可自行clone后再拷贝，另，cdn的引入我改成了国内的cdn，提高访问速度。如下：</p>
  <!-- JQUERY -->
  <script src="//cdn.bootcss.com/jquery/1.11.0/jquery.min.js"></script>
  <script src="//cdn.bootcss.com/jqueryui/1.10.4/jquery-ui.min.js"></script>
   <!-- MARKED -->
  <script src="js/marked.js"></script>
  <!-- HIGHLIGHT.JS -->
  <link rel="stylesheet" href="css/github.css">
  <script src="js/highlight.js"></script>
    <script type="text/javascript"
    src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
  </script>
  <!-- DITTO CSS -->
  <link rel="stylesheet" href="css/ditto.css">
  <script src="js/ditto.js"></script></li>
</ul>
<blockquote>
<p>观察sidebar.md中有个<code>[ditto:searchbar]</code>这是搜索框，没有则加上，要使用搜索功能，则要在index.html中修改加载的js，设置上ditto.github_username和ditto.github_repo以及ditto.base_url，依次表示你的github用户名，github上工程仓库名(二者负责告诉ditto去github搜索页面信息进而展示在wiki上)，github的页面修改地址(ditto的修改是直接跳转到github的修改链接)，同时还设置了ditto.highlight_code为true，让搜索的结果代码高亮，如下</p>
</blockquote>
<pre><code>&lt;!-- DITTO --&gt;
&lt;script&gt;
    $(function($) &#123;
      // essential settings
      ditto.index = &quot;README.md&quot;,
      ditto.sidebar_file = &quot;sidebar.md&quot;,
      // optional settings if you want github search
      ditto.github_username = &quot;GrayOxygen&quot;;   // &lt;------- EDIT ME!!
      ditto.github_repo = &quot;ShineOxygenWiki&quot;;       // &lt;------- EDIT ME!!
      ditto.highlight_code = true;    // &lt;------- EDIT ME!!
      // where the docs are actually stored on github - so you can edit
      // e.g. https://github.com/chutsu/ditto/edit/gh-pages
      ditto.base_url = &quot;https://github.com/GrayOxygen/wiki/edit/master&quot;;            // &lt;------- EDIT ME!!
      // run
      ditto.run();
    &#125;);
&lt;/script&gt;
</code></pre>
<p>打开git bash执行<code>git push origin master</code>同步到github仓库</p>
<p>在github的项目主页面，找到setting按钮，进入更改GitHub Pages选项，如图save后提示你已发布</p>
<!--  -->
<p><img src="/huiyang/2016/09/21/manual/page.png"></p>
<p>save保存你所选分支后，提示已发布，wiki已发布到公网，访问吧</p>
<p>具体效果参考<a href="https://grayoxygen.github.io/ShineOxygenWiki">我的wiki</a></p>
]]></content>
      <categories>
        <category>wiki构建</category>
        <category>ditto</category>
      </categories>
      <tags>
        <tag>ditto</tag>
        <tag>wiki</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Two Lives</title>
    <url>/huiyang/2025/08/08/two-lives/</url>
    <content><![CDATA[<p>Project:<br><strong>Two Lives: A Generative Audiovisual Installation Exploring Algorithmic Composition Through Concatenative Synthesis, L-System, and the Visualisation of Artificial and Natural Life</strong></p>
<p>This work is a audiovisual installation themed on “life”, composed of two independently running sub-modules: artificial life and natural life. The artificial life module features an alife-based visual, together with a concatenative synthesiser. The natural life module consists of a Max patcher (presenting video of human fertilised eggs and generating melodies) and an Ableton project (receiving MIDI notes from Max to drive instrumental performance). Each sub-module is equipped with an interaction tool, allowing the audience to manipulate sound and visuals in real time through hand gestures. At the same time, internal interconnections exist within each module: In artificial life, visuals directly influence sound generation in real time; In natural life, sound drives changes in the visual effects.</p>
<iframe src="https://player.vimeo.com/video/1108394692?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="320" height="180" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share" referrerpolicy="strict-origin-when-cross-origin" title="20250730_demonstration_on_a_single_computer"></iframe>
<iframe src="https://player.vimeo.com/video/1108392066?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="320" height="569" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share" referrerpolicy="strict-origin-when-cross-origin" title="20250724_edited_sound_installation_show"></iframe>

<p>performance with l system</p>
<iframe src="https://player.vimeo.com/video/1108855783?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="320" height="180" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share" referrerpolicy="strict-origin-when-cross-origin" title="20250810_performance_with_l_system"></iframe>]]></content>
      <categories>
        <category>algorithmic composition</category>
        <category>sonification</category>
      </categories>
      <tags>
        <tag>artificial life</tag>
        <tag>max/msp</tag>
        <tag>cv.jit</tag>
        <tag>c++ juce</tag>
        <tag>python</tag>
        <tag>mediapipe</tag>
        <tag>osc</tag>
      </tags>
  </entry>
</search>
